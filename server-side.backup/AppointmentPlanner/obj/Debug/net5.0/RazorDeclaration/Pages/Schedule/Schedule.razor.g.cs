// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace AppointmentPlanner.Pages.Schedule
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\_Imports.razor"
using AppointmentPlanner;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\_Imports.razor"
using AppointmentPlanner.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\_Imports.razor"
using Syncfusion.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\_Imports.razor"
using Syncfusion.Blazor.Inputs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\_Imports.razor"
using Syncfusion.Blazor.Popups;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\_Imports.razor"
using Syncfusion.Blazor.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\_Imports.razor"
using Syncfusion.Blazor.DropDowns;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\_Imports.razor"
using Syncfusion.Blazor.Calendars;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\_Imports.razor"
using Syncfusion.Blazor.Navigations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\_Imports.razor"
using Syncfusion.Blazor.Lists;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\_Imports.razor"
using Syncfusion.Blazor.Schedule;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\_Imports.razor"
using Syncfusion.Blazor.Grids;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\_Imports.razor"
using Syncfusion.Blazor.Charts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\_Imports.razor"
using Syncfusion.Blazor.Buttons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\_Imports.razor"
using Syncfusion.Blazor.SplitButtons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\Pages\Schedule\Schedule.razor"
using AppointmentPlanner.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\Pages\Schedule\Schedule.razor"
using AppointmentPlanner.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\Pages\Schedule\Schedule.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.LayoutAttribute(typeof(MainLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/schedule")]
    public partial class Schedule : Microsoft.AspNetCore.Components.ComponentBase, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 108 "C:\Users\pawel\Source\Repos\plipowczan\blazor-showcase-appointment-planner\server-side.backup\AppointmentPlanner\Pages\Schedule\Schedule.razor"
       

    SfSchedule<Hospital> scheduleObj { get; set; }

    [Inject]
    protected IJSRuntime JsRuntime { get; set; }
    [Inject]
    protected AppointmentService Service { get; set; }
    private bool editUpcoming = false;

    private bool openDialog { get; set; } = false;
    private int viewInterval { get; set; } = 60;
    private int calendarDayOfWeek { get; set; } = 1;
    private string resourceColorField { get; set; }
    private DateTime currentDate { get; set; }

    SfDropDownList<int?, Doctor> ddlObj { get; set; }

    private List<Hospital> scheduleEventData { get; set; }

    private string[] resourceGroup { get; set; } = new string[] { "Departments", "Doctors" };

    private string startHour { get; set; }
    private string endHour { get; set; }
    private int[] workDay { get; set; } = new int[] { 0, 1, 2, 3, 4, 5, 6 };
    private Calendar workHours { get; set; }

    private View sceduleView { get; set; }

    private List<Specialization> specialistCategory { get; set; }
    private List<Doctor> resourceDataSource { get; set; }

    private List<WaitingList> waitingList { get; set; }


    private Query queryData { get; set; }
    private List<Doctor> activeDoctorData { get; set; }

    protected override void OnInitialized()
    {
        sceduleView = (View)Enum.Parse(typeof(View), (Service.CalendarSettings.CurrentView as string));
        currentDate = Service.StartDate;
        this.viewInterval = Service.CalendarSettings.Interval;
        this.calendarDayOfWeek = Service.CalendarSettings.FirstDayOfWeek;
        this.resourceColorField = Service.CalendarSettings.BookingColor;
        this.waitingList = Service.WaitingLists;
        this.resourceDataSource = Service.Doctors;
        this.specialistCategory = Service.Specializations;
        this.startHour = Service.CalendarSettings.Calendar.Start;
        this.endHour = Service.CalendarSettings.Calendar.End;
        this.scheduleEventData = Service.Hospitals;
        this.workHours = Service.CalendarSettings.Calendar;
        this.queryData = new Query();
    }

    private string getEventTime(WaitingList data)
    {
        return Service.GetFormatDate(data.StartTime, "MMM d") + ", " + Service.GetFormatDate(data.StartTime, "h:mm tt") + "-" + Service.GetFormatDate(data.EndTime, "h:mm tt");
    }

    private string getDepartmentName(int id)
    {
        Specialization specData = this.specialistCategory.Where(item => item.DepartmentId.Equals(id)).FirstOrDefault();
        return specData.Text.ToUpper();
    }

    private string getDateHeaderText(DateTime? date)
    {
        return Service.GetFormatDate((DateTime)date, "ddd, MMMM d");
    }

    private string getTreatmentDetail(WaitingList data)
    {
        if (data.Treatment != null)
        {
            return data.Treatment;
        }
        else
        {
            return "CHECKUP";
        }
    }


    public void OnCellClick(CellClickEventArgs args)
    {
        args.Cancel = true;
    }
    public void OnActionBegin(Syncfusion.Blazor.Schedule.ActionEventArgs<Hospital> args)
    {
        if (args.ActionType == ActionType.EventCreate && args.AddedRecords.Count > 0)
        {
            foreach(Hospital Data in args.AddedRecords)
            {
                Random random = new Random();
                Data.PatientId = Data.PatientId == 0 ? random.Next(1, Service.Patients.Max(p => p.Id)) : Data.PatientId;
            }
        }
    }
    private void onValueChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, Doctor> args)
    {
        if (args.Value != null)
        {
            refreshDataSource((int)args.ItemData.DepartmentId, args.ItemData.Id.ToString());
        }
        else
        {
            setDefaultData();
        }
    }
    private void refreshDataSource(int deptId, string doctorId)
    {
        List<Doctor> filterItem = Service.Doctors.Where(item => item.Id.Equals(Int32.Parse(doctorId))).ToList();
        activeDoctorData = filterItem;
        workDay = filterItem[0].AvailableDays;
        workHours = new Calendar { Start = filterItem[0].StartHour, End = filterItem[0].EndHour };
        queryData = new Query().Where(new WhereFilter() { Field = "Id", Operator = "equal", value = Int32.Parse(doctorId) });
        if (filterItem.Any())
        {
            updateBreakHours(scheduleObj.SelectedDate);
            scheduleEventData = generateEvents(activeDoctorData[0]);
        }
        else
        {
            scheduleEventData = Service.Hospitals;
        }
        this.updateWaitingList((int)deptId);
    }

    private void updateWaitingList(int? deptId)
    {
        var filteredData = Service.WaitingLists;
        if (deptId != null)
        {
            filteredData = filteredData.Where(item => item.DepartmentId.Equals(deptId)).ToList();
        }
        waitingList = filteredData;
    }

    private void setDefaultData()
    {
        specialistCategory = Service.Specializations;
        resourceDataSource = Service.Doctors;

        queryData = new Query();

        scheduleEventData = Service.Hospitals;
        updateWaitingList(null);
        startHour = Service.CalendarSettings.Calendar.Start;
        endHour = Service.CalendarSettings.Calendar.End;
        workDay = new int[] { 0, 1, 2, 3, 4, 5, 6 };
        workHours = Service.CalendarSettings.Calendar;
        activeDoctorData = new List<Doctor>();
    }
    private List<Hospital> generateEvents(Doctor activeData)
    {
        List<Hospital> filteredEvents = new List<Hospital>();

        List<Hospital> datas = Service.Hospitals.Where(item => item.DoctorId == activeData.Id).ToList();

        datas.ForEach((ele) => filteredEvents.Add(ele));

        activeData.WorkDays.ForEach((ele) =>
        {
            if (ele.State != "RemoveBreak")
            {
                int id = (filteredEvents.Any()) ? filteredEvents.Select(item => item.Id).Max() + 1 : 0;

                filteredEvents.Add(new Hospital() { Id = id, Name = "Break Time", StartTime = (DateTime)ele.BreakStartHour, EndTime = (DateTime)ele.BreakEndHour, DoctorId = activeData.Id });
            }
            if (ele.Enable)
            {
                string shiftValue = (string)activeData.DutyTiming;
                List<Hospital> createData = new List<Hospital>();
                var workend = (DateTime)ele.WorkEndHour;
                var workstart = (DateTime)ele.WorkStartHour;
                if (shiftValue == "Shift1")
                {
                    createData.Add(new Hospital() { StartTime = new DateTime(workstart.Year, workstart.Month, workstart.Day, 17, 0, 0), EndTime = new DateTime(workend.Year, workend.Month, workend.Day, 21, 0, 0) });
                }
                else if (shiftValue == "Shift2")
                {
                    createData.Add(new Hospital() { StartTime = new DateTime(workstart.Year, workstart.Month, workstart.Day, 8, 0, 0), EndTime = new DateTime(workend.Year, workend.Month, workend.Day, 10, 0, 0) });
                    createData.Add(new Hospital() { StartTime = new DateTime(workstart.Year, workstart.Month, workstart.Day, 19, 0, 0), EndTime = new DateTime(workend.Year, workend.Month, workend.Day, 21, 0, 0) });
                }
                else
                {
                    createData.Add(new Hospital() { StartTime = new DateTime(workstart.Year, workstart.Month, workstart.Day, 8, 0, 0), EndTime = new DateTime(workend.Year, workend.Month, workend.Day, 12, 0, 0) });
                }
                createData.ForEach((item) =>
                {
                    int id = filteredEvents.Select(data => data.Id).Max() + 1;

                    filteredEvents.Add(new Hospital() { Id = id, Name = "Off Work", IsBlock = true, StartTime = (DateTime)item.StartTime, EndTime = (DateTime)item.EndTime, DoctorId = activeData.Id });
                });
            }
        });
        return filteredEvents;
    }
    private void updateBreakHours(DateTime currentDate)
    {
        List<DateTime> currentViewDates = new List<DateTime>();
        DateTime firstDayOfWeek = Service.GetWeekFirstDate(currentDate);
        DateTime startDate = firstDayOfWeek;
        DateTime endDate = firstDayOfWeek.AddDays(7);
        do
        {
            currentViewDates.Add(startDate);
            startDate = startDate.AddDays(1);
        } while (startDate.AddDays(startDate.Day) != endDate.AddDays(endDate.Day));
        currentViewDates.ForEach((item) =>
        {
            activeDoctorData[0].WorkDays.ForEach((dayItem) =>
            {
                DateTime dd = (DateTime)dayItem.BreakStartHour;

                if (dd.DayOfWeek == item.DayOfWeek)
                {
                    dayItem.BreakStartHour = resetDateValue((DateTime)dayItem.BreakStartHour, item);
                    dayItem.BreakEndHour = resetDateValue((DateTime)dayItem.BreakEndHour, item);
                    dayItem.WorkStartHour = resetDateValue((DateTime)dayItem.WorkStartHour, item);
                    dayItem.WorkEndHour = resetDateValue((DateTime)dayItem.WorkEndHour, item);
                }
            });
        });
    }
    private DateTime resetDateValue(DateTime date, DateTime item)
    {
        return date = item;
    }
    public async void NodeDragStop(DragAndDropEventArgs args)
    {
        args.Cancel = true;
        CellClickEventArgs cellData = await scheduleObj.GetTargetCellAsync((int)args.Left, (int)args.Top);
        if (cellData != null)
        {
            var resourceDetails = scheduleObj.GetResourceByIndex(cellData.GroupIndex);
            WaitingList TreeData = waitingList.Where(data => data.Id.ToString() == args.DraggedNodeData.Id).First();
            Hospital eventData;
            if (resourceDetails != null)
            {
                eventData = new Hospital
                {
                    Name = TreeData.Name,
                    StartTime = cellData.StartTime,
                    EndTime = cellData.EndTime,
                    IsAllDay = cellData.IsAllDay,
                    Symptoms = TreeData.Disease,
                    PatientId = TreeData.PatientId,
                    DepartmentId = resourceDetails.GroupData.DepartmentId,
                    DoctorId = resourceDetails.GroupData.DoctorId
                };
            }
            else
            {
                eventData = new Hospital
                {
                    Name = TreeData.Name,
                    StartTime = cellData.StartTime,
                    EndTime = cellData.EndTime,
                    IsAllDay = cellData.IsAllDay,
                    Symptoms = TreeData.Disease,
                    PatientId = TreeData.PatientId,
                    DepartmentId = TreeData.DepartmentId,
                    DoctorId = Int32.Parse(args.DraggedNodeData.Id)
                };
            }
            await this.scheduleObj.OpenEditorAsync(eventData, CurrentAction.Add);
        }
    }

    public void Dispose()
    {
        scheduleObj = null;
        ddlObj = null;
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
